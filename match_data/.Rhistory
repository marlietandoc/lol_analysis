## Quick analysis of mastery data.. choose top 5 champs (mains) for each person
mains <- merged_mastery %>%
group_by(summonerId) %>%
summarize(main_1 = name[1],
main_2 = name[2],
main_3 = name[3])
#adds champion ID!
merged_mastery <- mastery_data %>%
left_join(keys_df, by = 'championId')
#lets try igraph
#Load packages
library(plyr) #tidyverse
library(dplyr)#tidyverse
library(tidyr)#tidyverse
library(ggplot2) #plotting
mastery_data <- read.csv('mastery_data_48.csv')
mastery_data$championId <- as.character(mastery_data$championId)
champion_dd <- fromJSON("http://ddragon.leagueoflegends.com/cdn/11.10.1/data/en_US/championFull.json")
#Lets try to add column names
keys <- champion_dd$keys
keys_df <-bind_rows(keys, .id = "column_label")
keys_df = t(keys_df)
keys_df <- cbind(rownames(keys_df), data.frame(keys_df, row.names=NULL)) %>%
filter(keys_df != 'column_label')
colnames(keys_df) <- c("championId", "name")
#adds champion ID!
merged_mastery <- mastery_data %>%
left_join(keys_df, by = 'championId')
keys_df <- cbind(rownames(keys_df), data.frame(keys_df, row.names=NULL)) %>%
filter(keys_df != 'column_label')
#Lets try to add column names
keys <- champion_dd$keys
keys_df <-bind_rows(keys, .id = "column_label")
#Lets try to add column names
keys <- champion_dd$keys
champion_dd <- fromJSON("http://ddragon.leagueoflegends.com/cdn/11.10.1/data/en_US/championFull.json")
library(jsonlite)
mastery_data <- read.csv('mastery_data_48.csv')
mastery_data$championId <- as.character(mastery_data$championId)
champion_dd <- fromJSON("http://ddragon.leagueoflegends.com/cdn/11.10.1/data/en_US/championFull.json")
#Lets try to add column names
keys <- champion_dd$keys
keys_df <-bind_rows(keys, .id = "column_label")
keys_df = t(keys_df)
keys_df <- cbind(rownames(keys_df), data.frame(keys_df, row.names=NULL)) %>%
filter(keys_df != 'column_label')
colnames(keys_df) <- c("championId", "name")
#adds champion ID!
merged_mastery <- mastery_data %>%
left_join(keys_df, by = 'championId')
## Quick analysis of mastery data.. choose top 5 champs (mains) for each person
mains <- merged_mastery %>%
group_by(summonerId) %>%
summarize(main_1 = name[1],
main_2 = name[2],
main_3 = name[3])
df <- mains
#Get list of all cities in first column
champs = sort(unique(df$main_1))
firstCol = data.frame(champs = champs)
#For each champ, do the counts
myMatrix = map_dfc(champs, function(champ){
#Filter out all rows of a certain champ (champ1),
#then count all connected champs
newCol = data.frame(champs = unlist(df %>% filter(main_1 == champ) %>%
select(-main_1))) %>%
group_by(champs) %>% summarise(n = n())
#Join the data with the column of all champs, and rename it to the champ
newCol = firstCol %>% left_join(newCol, by = "champs") %>% select(n)
colnames(newCol) = champ
newCol
})
#Replace NA by 0 (some cities to not coneect to all others)
myMatrix = myMatrix %>% replace(is.na(.), 0)
#Display the final result as ..
#matrix ...
finalMatrix = as.matrix(myMatrix)
rownames(finalMatrix) = champs
adjMat <- finalMatrix
#Now for each champion we want to find the 2 most common connections
a <- select(mains, main_1,main_2) %>%
filter(!(is.na(main_1)), !(is.na(main_2)))
#edge list
edges <- a %>%
group_by(main_1,main_2) %>%
summarise(weight = n()) %>%
ungroup() %>%
filter(weight > 3) #only strong connections
#edge list
edges <- a %>%
group_by(main_1,main_2) %>%
summarise(weight = n()) %>%
ungroup() %>%
filter(weight > 2) #only strong connections
library(dplyr)#tidyverse
#Now for each champion we want to find the 2 most common connections
a <- select(mains, main_1,main_2) %>%
filter(!(is.na(main_1)), !(is.na(main_2)))
View(a)
library(tidyr)#tidyverse
library(plyr) #tidyverse
#Now for each champion we want to find the 2 most common connections
a <- select(mains, main_1,main_2) %>%
filter(!(is.na(main_1)), !(is.na(main_2)))
#edge list
edges <- a %>%
group_by(main_1,main_2) %>%
summarise(weight = n()) %>%
ungroup() %>%
filter(weight > 2) #only strong connections
#edge list
edges <- a %>%
group_by(main_1,main_2) %>%
dplyr::summarise(weight = n()) %>%
ungroup() %>%
filter(weight > 2) #only strong connections
library(dplyr)
library(tidyr)
gotdf.el=edges%>%select(main_1,main_2,weight)%>%
group_by(main_1,main_2)%>%
expand(edge=c(1:weight))%>%select(-edge)
View(keys_df)
library(plyr) #tidyverse
library(dplyr)#tidyverse
library(tidyverse)#tidyverse
library(ggplot2) #plotting
library(ggdark)
#Match analysis
setwd("~/Documents/GitHub/league/player_level/match_data_batches_dated")
batch_1 <- read.csv('match_data_dated_3000.csv')
batch_2 <- read.csv('match_data_dated_7000.csv')
batch_3 <- read.csv('match_data_dated_9000.csv')
batch_4 <- read.csv('match_data_dated_6000_2.csv')
#all matches
matches <- rbind(batch_1,batch_2,batch_3,batch_4)
table(matches$teamPosition)
table(matches$lane)
table(matches$teamPosition)
table(matches$lane)
#Lets see how much data we got for each summoner
sum_level <- matches %>%
group_by(puuid) %>%
summarize(count = length(puuid))
#These are summoners that don't repeat across a lot of matches
sum_no_rep <- sum_level$puuid[which(sum_level$count < 10)]
#And again these are not necessarily reflecting that champion, but could also be reflecting the people who play those champions,
#And I feel like our sample sizes are too small right now for this champion level analysis (some champions only have 40 games played on them etc.)
champ_level <- filter(matches, puuid %in% sum_no_rep) %>%
group_by(championName) %>%
summarize(number_of_games = length(championName),
num_wards_placed = sum(wardsPlaced),
deaths = sum(deaths),
kills = sum(kills),
first_bloods = sum(firstBloodKill)) %>%
mutate(wards_per_game = num_wards_placed/number_of_games, #Wards per game
deaths_per_game = deaths/number_of_games,#Deaths per game
kills_per_game = kills/number_of_games,#Kills per game
first_bloods_normalized = first_bloods/number_of_games)
#Role analysis. Lets look at the summoners we have lots of data on (>10)
#Count number of games per role for each summoner using team position (most likely position according to Riot API docs)
sum_level_role <- filter(matches, !(puuid %in% sum_no_rep)) %>%
group_by(puuid) %>%
summarize(total_games = length(puuid),
top_games = length(puuid[which(teamPosition == 'TOP')]),
jung_games = length(puuid[which(teamPosition == 'JUNGLE')]),
mid_games = length(puuid[which(teamPosition == 'MIDDLE')]),
adc_games = length(puuid[which(teamPosition == 'BOTTOM')]),
sup_games = length(puuid[which(teamPosition == 'UTILITY')])) %>%
mutate(top_percent = top_games/total_games,
jung_percent = jung_games/total_games,
mid_percent = mid_games/total_games,
adc_percent = adc_games/total_games,
sup_percent = sup_games/total_games)
#Transform into long dataframe for plotting
long <- select(sum_level_role, puuid, top_percent,jung_percent,mid_percent,adc_percent,sup_percent) %>%
gather(role, percent_games, top_percent:sup_percent)
#For labelling facets ing raph
long$role <- recode_factor(long$role, top_percent = "Top",
jung_percent = "Jungle",
mid_percent = 'Mid',
adc_percent = 'ADC',
sup_percent = 'Support')
#Make sure we are roughly equally sampling all of the roles (we should beacuse all these roles are needed per game, though may differ slightly due to repeats across matches in summoner ids)
role_sum <- long %>%
group_by(role) %>%
summarise(mean_percent_games = mean(percent_games))
#Greater than 80% of games palyed as that role? (Extreme mains)!!
extreme_mains <- filter(long, percent_games > 0.8)
#Out of X Number of summoners, X% will play the same role for all their games
#When this is the case, its usually X Role
table(extreme_mains$role) #need to divide this by total number of players
#summarize of extreme mains
extreme_main_sum <- extreme_mains %>%
group_by(role) %>%
summarize(total_games = n())
####If you main one role which others are you likely to main?####
#Role (string): top,jung,mid,adc,sup
other_roles <- function(role) {
#main for that role
role_main
}
#Those who play top more than 50% of games
top_mains <- filter(sum_level_role, top_percent > 0.5)
top_main_sum <- top_mains %>%
group_by()
top_long <- select(top_mains, puuid, top_percent,mid_percent,jung_percent,adc_percent,sup_percent) %>%
gather(role, percent, top_percent:sup_percent)
top_long$role <- recode_factor(top_long$role, top_percent = "Top",
jung_percent = "Jungle",
mid_percent = 'Mid',
adc_percent = 'ADC',
sup_percent = 'Support')
#exclude Top
role_sum_top <- top_long %>%
group_by(role) %>%
summarise(mean_percent_games = mean(percent)) %>%
filter(role != 'Top')
#But if its ranked its as expected because you need all roles?
top_p <- ggplot(role_sum_top, aes(x=role, y=mean_percent_games*100, fill=role)) +
geom_bar(stat="identity")+
theme_dark(base_size = 20) +
scale_fill_brewer(palette="Spectral") +
coord_cartesian(ylim = c(0,15)) +
theme(legend.position = 'none')+
labs(y = 'Percent of games', x = "Role") +
ggtitle('Top Mains')
top_p
#Those who play sup more than 50% of games
sup_mains <- filter(sum_level_role, sup_percent > 0.5)
sup_main_sum <- sup_mains %>%
group_by()
sup_long <- select(sup_mains, puuid, sup_percent,mid_percent,jung_percent,adc_percent,top_percent) %>%
gather(role, percent, sup_percent:top_percent)
sup_long$role <- recode_factor(sup_long$role, sup_percent = "Support",
jung_percent = "Jungle",
mid_percent = 'Mid',
adc_percent = 'ADC',
top_percent = 'Top')
#exclude sup
role_sum_sup <- sup_long %>%
group_by(role) %>%
summarise(mean_percent_games = mean(percent)) %>%
filter(role != 'Support')
#But if its ranked its as expected because you need all roles?
sup_p <- ggplot(role_sum_sup, aes(x=role, y=mean_percent_games*100, fill=role)) +
geom_bar(stat="identity")+
theme_dark(base_size = 20) +
scale_fill_brewer(palette="Spectral") +
coord_cartesian(ylim = c(0,15)) +
theme(legend.position = 'none')+
labs(y = 'Percent of games', x = "Role") +
ggtitle('Support Mains')
sup_p
#How about number of unique champions being played per person?
unique_champions<- filter(matches, !(puuid %in% sum_no_rep)) %>%
group_by(puuid) %>%
summarize(unique_champs_played = length(unique(championName)),
total_games = n()) %>%
filter(total_games > 28)
#histogram
hist(unique_champions$unique_champs_played)
grp.mean = mean(unique_champions$unique_champs_played)
#This ones good!
library(ggdark)
ggplot(unique_champions, aes(x=unique_champs_played))+
geom_histogram(aes(y = (..count..)/sum(..count..)), binwidth = 1, color = 'darkblue', fill = 'lightblue')+
dark_theme_gray(base_size = 20,base_family = 'Helvetica') +
#stat_bin(aes(y=(..count..)/sum(..count..),
# label=paste0(round((..count..)/sum(..count..)*100,1),"%")),color = 'darkblue', fill = 'lightblue') +
geom_vline(data=unique_champions, aes(xintercept=grp.mean, color="pink"),
linetype="dashed") +
geom_vline(data=unique_champions, aes(xintercept=30, color="green")) +
geom_vline(data=unique_champions, aes(xintercept=0, color="green")) +
geom_text(aes(x=13, label="Average", y=0.1), colour="lightblue", angle=0, size = 6)+
geom_text(aes(x=29, label="Different every game", y=0.072), colour="pink", angle=90, size = 6) +
geom_text(aes(x=-1, label="Same every game", y=0.07), colour="pink", angle=90, size = 6) +
coord_cartesian(ylim = c(0,0.12), xlim = c(-1,30)) +
ggtitle('How many different champions do summoners play?') +
theme(plot.background = element_rect(fill = "grey10"),
panel.background = element_blank(),
panel.grid.major = element_line(color = "grey30", size = 0.1),
panel.grid.minor = element_line(color = "grey30", size = 0.1),
legend.background = element_blank(),
axis.ticks = element_blank(),
legend.position = 'none') +
labs(y = 'Percentage of players', x = "Number of unique champions played in last 30 games")
View(unique_champions)
cor.test(unique_champions$unique_champs_played,)
cor.test(unique_champions$unique_champs_played, unique_champions$total_games)
#Interesting its not correlated
cor.test(unique_champions$unique_champs_played, unique_champions$total_games)
median(unique_champions)
median(unique_champions$total_games)
View(matches)
#And again these are not necessarily reflecting that champion, but could also be reflecting the people who play those champions,
#And I feel like our sample sizes are too small right now for this champion level analysis (some champions only have 40 games played on them etc.)
champ_level <- filter(matches, puuid %in% sum_no_rep) %>%
group_by(championName) %>%
summarize(number_of_games = length(championName),
num_wards_placed = sum(wardsPlaced),
deaths = sum(deaths),
kills = sum(kills),
first_bloods = sum(firstBloodKill),
missing = sum(enemyMissingPings)) %>%
mutate(wards_per_game = num_wards_placed/number_of_games, #Wards per game
deaths_per_game = deaths/number_of_games,#Deaths per game
kills_per_game = kills/number_of_games,#Kills per game
first_bloods_normalized = first_bloods/number_of_games)
View(champ_level)
#And again these are not necessarily reflecting that champion, but could also be reflecting the people who play those champions,
#And I feel like our sample sizes are too small right now for this champion level analysis (some champions only have 40 games played on them etc.)
champ_level <- filter(matches, puuid %in% sum_no_rep) %>%
group_by(championName) %>%
summarize(number_of_games = length(championName),
num_wards_placed = sum(wardsPlaced),
deaths = sum(deaths),
kills = sum(kills),
first_bloods = sum(firstBloodKill),
missing = sum(enemyMissingPings,na.rm=TRUE)) %>%
mutate(wards_per_game = num_wards_placed/number_of_games, #Wards per game
deaths_per_game = deaths/number_of_games,#Deaths per game
kills_per_game = kills/number_of_games,#Kills per game
first_bloods_normalized = first_bloods/number_of_games)
View(champ_level)
#And again these are not necessarily reflecting that champion, but could also be reflecting the people who play those champions,
#And I feel like our sample sizes are too small right now for this champion level analysis (some champions only have 40 games played on them etc.)
champ_level <- filter(matches, puuid %in% sum_no_rep) %>%
group_by(championName) %>%
summarize(number_of_games = length(championName),
num_wards_placed = sum(wardsPlaced),
deaths = sum(deaths),
kills = sum(kills),
first_bloods = sum(firstBloodKill),
missing = sum(enemyMissingPings,na.rm=TRUE)) %>%
mutate(wards_per_game = num_wards_placed/number_of_games, #Wards per game
deaths_per_game = deaths/number_of_games,#Deaths per game
kills_per_game = kills/number_of_games,#Kills per game
first_bloods_normalized = first_bloods/number_of_games,
pings_per_game = missing/number_of_games)
#Those who play top more than 50% of games
top_mains <- filter(sum_level_role, top_percent > 0.5)
top_main_sum <- top_mains %>%
group_by()
top_long <- select(top_mains, puuid, top_percent,mid_percent,jung_percent,adc_percent,sup_percent) %>%
gather(role, percent, top_percent:sup_percent)
top_long$role <- recode_factor(top_long$role, top_percent = "Top",
jung_percent = "Jungle",
mid_percent = 'Mid',
adc_percent = 'ADC',
sup_percent = 'Support')
#exclude Top
role_sum_top <- top_long %>%
group_by(role) %>%
summarise(mean_percent_games = mean(percent)) %>%
filter(role != 'Top')
#But if its ranked its as expected because you need all roles?
top_p <- ggplot(role_sum_top, aes(x=role, y=mean_percent_games*100, fill=role)) +
geom_bar(stat="identity")+
theme_dark(base_size = 20) +
scale_fill_brewer(palette="Spectral") +
coord_cartesian(ylim = c(0,15)) +
theme(legend.position = 'none')+
labs(y = 'Percent of games', x = "Role") +
ggtitle('Top Mains')
top_p
v
v
(
(
#Role analysis. Lets look at the summoners we have lots of data on (>10)
#Count number of games per role for each summoner using team position (most likely position according to Riot API docs)
sum_level_role <- filter(matches, !(puuid %in% sum_no_rep)) %>%
group_by(puuid) %>%
summarize(total_games = length(puuid),
top_games = length(puuid[which(teamPosition == 'TOP')]),
jung_games = length(puuid[which(teamPosition == 'JUNGLE')]),
mid_games = length(puuid[which(teamPosition == 'MIDDLE')]),
adc_games = length(puuid[which(teamPosition == 'BOTTOM')]),
sup_games = length(puuid[which(teamPosition == 'UTILITY')])) %>%
mutate(top_percent = top_games/total_games,
jung_percent = jung_games/total_games,
mid_percent = mid_games/total_games,
adc_percent = adc_games/total_games,
sup_percent = sup_games/total_games)
#Role analysis. Lets look at the summoners we have lots of data on (>10)
#Count number of games per role for each summoner using team position (most likely position according to Riot API docs)
sum_level_role <- filter(matches, !(puuid %in% sum_no_rep)) %>%
group_by(puuid) %>%
summarize(total_games = length(puuid),
top_games = length(puuid[which(teamPosition == 'TOP')]),
jung_games = length(puuid[which(teamPosition == 'JUNGLE')]),
mid_games = length(puuid[which(teamPosition == 'MIDDLE')]),
adc_games = length(puuid[which(teamPosition == 'BOTTOM')]),
sup_games = length(puuid[which(teamPosition == 'UTILITY')])) %>%
mutate(top_percent = top_games/total_games,
jung_percent = jung_games/total_games,
mid_percent = mid_games/total_games,
adc_percent = adc_games/total_games,
sup_percent = sup_games/total_games)
#Transform into long dataframe for plotting
long <- select(sum_level_role, puuid, top_percent,jung_percent,mid_percent,adc_percent,sup_percent) %>%
gather(role, percent_games, top_percent:sup_percent)
#For labelling facets ing raph
long$role <- recode_factor(long$role, top_percent = "Top",
jung_percent = "Jungle",
mid_percent = 'Mid',
adc_percent = 'ADC',
sup_percent = 'Support')
#Make sure we are roughly equally sampling all of the roles (we should beacuse all these roles are needed per game, though may differ slightly due to repeats across matches in summoner ids)
role_sum <- long %>%
group_by(role) %>%
summarise(mean_percent_games = mean(percent_games))
#Greater than 80% of games palyed as that role? (Extreme mains)!!
extreme_mains <- filter(long, percent_games > 0.8)
#Out of X Number of summoners, X% will play the same role for all their games
#When this is the case, its usually X Role
table(extreme_mains$role) #need to divide this by total number of players
#summarize of extreme mains
extreme_main_sum <- extreme_mains %>%
group_by(role) %>%
summarize(total_games = n())
####If you main one role which others are you likely to main?####
#Role (string): top,jung,mid,adc,sup
other_roles <- function(role) {
#main for that role
role_main
}
#Those who play top more than 50% of games
top_mains <- filter(sum_level_role, top_percent > 0.5)
top_main_sum <- top_mains %>%
group_by()
top_long <- select(top_mains, puuid, top_percent,mid_percent,jung_percent,adc_percent,sup_percent) %>%
gather(role, percent, top_percent:sup_percent)
top_long$role <- recode_factor(top_long$role, top_percent = "Top",
jung_percent = "Jungle",
mid_percent = 'Mid',
adc_percent = 'ADC',
sup_percent = 'Support')
#exclude Top
role_sum_top <- top_long %>%
group_by(role) %>%
summarise(mean_percent_games = mean(percent)) %>%
filter(role != 'Top')
#But if its ranked its as expected because you need all roles?
top_p <- ggplot(role_sum_top, aes(x=role, y=mean_percent_games*100, fill=role)) +
geom_bar(stat="identity")+
theme_dark(base_size = 20) +
scale_fill_brewer(palette="Spectral") +
coord_cartesian(ylim = c(0,15)) +
theme(legend.position = 'none')+
labs(y = 'Percent of games', x = "Role") +
ggtitle('Top Mains')
top_p
#Those who play sup more than 50% of games
sup_mains <- filter(sum_level_role, sup_percent > 0.5)
sup_main_sum <- sup_mains %>%
group_by()
sup_long <- select(sup_mains, puuid, sup_percent,mid_percent,jung_percent,adc_percent,top_percent) %>%
gather(role, percent, sup_percent:top_percent)
sup_long$role <- recode_factor(sup_long$role, sup_percent = "Support",
jung_percent = "Jungle",
mid_percent = 'Mid',
adc_percent = 'ADC',
top_percent = 'Top')
#exclude sup
role_sum_sup <- sup_long %>%
group_by(role) %>%
summarise(mean_percent_games = mean(percent)) %>%
filter(role != 'Support')
#But if its ranked its as expected because you need all roles?
sup_p <- ggplot(role_sum_sup, aes(x=role, y=mean_percent_games*100, fill=role)) +
geom_bar(stat="identity")+
theme_dark(base_size = 20) +
scale_fill_brewer(palette="Spectral") +
coord_cartesian(ylim = c(0,15)) +
theme(legend.position = 'none')+
labs(y = 'Percent of games', x = "Role") +
ggtitle('Support Mains')
sup_p
#How about number of unique champions being played per person?
unique_champions<- filter(matches, !(puuid %in% sum_no_rep)) %>%
group_by(puuid) %>%
summarize(unique_champs_played = length(unique(championName)),
total_games = n()) %>%
filter(total_games > 28)
#histogram
hist(unique_champions$unique_champs_played)
grp.mean = mean(unique_champions$unique_champs_played)
#This ones good!
library(ggdark)
ggplot(unique_champions, aes(x=unique_champs_played))+
geom_histogram(aes(y = (..count..)/sum(..count..)), binwidth = 1, color = 'darkblue', fill = 'lightblue')+
dark_theme_gray(base_size = 20,base_family = 'Helvetica') +
#stat_bin(aes(y=(..count..)/sum(..count..),
# label=paste0(round((..count..)/sum(..count..)*100,1),"%")),color = 'darkblue', fill = 'lightblue') +
geom_vline(data=unique_champions, aes(xintercept=grp.mean, color="pink"),
linetype="dashed") +
geom_vline(data=unique_champions, aes(xintercept=30, color="green")) +
geom_vline(data=unique_champions, aes(xintercept=0, color="green")) +
geom_text(aes(x=13, label="Average", y=0.1), colour="lightblue", angle=0, size = 6)+
geom_text(aes(x=29, label="Different every game", y=0.072), colour="pink", angle=90, size = 6) +
geom_text(aes(x=-1, label="Same every game", y=0.07), colour="pink", angle=90, size = 6) +
coord_cartesian(ylim = c(0,0.12), xlim = c(-1,30)) +
ggtitle('How many different champions do summoners play?') +
theme(plot.background = element_rect(fill = "grey10"),
panel.background = element_blank(),
panel.grid.major = element_line(color = "grey30", size = 0.1),
panel.grid.minor = element_line(color = "grey30", size = 0.1),
legend.background = element_blank(),
axis.ticks = element_blank(),
legend.position = 'none') +
labs(y = 'Percentage of players', x = "Number of unique champions played in last 30 games")
